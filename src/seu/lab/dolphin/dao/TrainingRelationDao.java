package seu.lab.dolphin.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import seu.lab.dolphin.dao.TrainingRelation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRAINING_RELATION.
*/
public class TrainingRelationDao extends AbstractDao<TrainingRelation, Long> {

    public static final String TABLENAME = "TRAINING_RELATION";

    /**
     * Properties of entity TrainingRelation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "training_relation_id");
        public final static Property Gesture_id = new Property(1, long.class, "gesture_id", false, "GESTURE_ID");
        public final static Property Traing_data_set_id = new Property(2, long.class, "traing_data_set_id", false, "TRAING_DATA_SET_ID");
    };

    private DaoSession daoSession;

    private Query<TrainingRelation> gesture_Training_relationQuery;
    private Query<TrainingRelation> trainingDataset_Training_relationQuery;

    public TrainingRelationDao(DaoConfig config) {
        super(config);
    }
    
    public TrainingRelationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRAINING_RELATION' (" + //
                "'training_relation_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'GESTURE_ID' INTEGER NOT NULL ," + // 1: gesture_id
                "'TRAING_DATA_SET_ID' INTEGER NOT NULL );"); // 2: traing_data_set_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRAINING_RELATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrainingRelation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGesture_id());
        stmt.bindLong(3, entity.getTraing_data_set_id());
    }

    @Override
    protected void attachEntity(TrainingRelation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrainingRelation readEntity(Cursor cursor, int offset) {
        TrainingRelation entity = new TrainingRelation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // gesture_id
            cursor.getLong(offset + 2) // traing_data_set_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrainingRelation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGesture_id(cursor.getLong(offset + 1));
        entity.setTraing_data_set_id(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrainingRelation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrainingRelation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "training_relation" to-many relationship of Gesture. */
    public List<TrainingRelation> _queryGesture_Training_relation(long gesture_id) {
        synchronized (this) {
            if (gesture_Training_relationQuery == null) {
                QueryBuilder<TrainingRelation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Gesture_id.eq(null));
                gesture_Training_relationQuery = queryBuilder.build();
            }
        }
        Query<TrainingRelation> query = gesture_Training_relationQuery.forCurrentThread();
        query.setParameter(0, gesture_id);
        return query.list();
    }

    /** Internal query to resolve the "training_relation" to-many relationship of TrainingDataset. */
    public List<TrainingRelation> _queryTrainingDataset_Training_relation(long traing_data_set_id) {
        synchronized (this) {
            if (trainingDataset_Training_relationQuery == null) {
                QueryBuilder<TrainingRelation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Traing_data_set_id.eq(null));
                trainingDataset_Training_relationQuery = queryBuilder.build();
            }
        }
        Query<TrainingRelation> query = trainingDataset_Training_relationQuery.forCurrentThread();
        query.setParameter(0, traing_data_set_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGestureDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTrainingDatasetDao().getAllColumns());
            builder.append(" FROM TRAINING_RELATION T");
            builder.append(" LEFT JOIN GESTURE T0 ON T.'GESTURE_ID'=T0.'gesture_id'");
            builder.append(" LEFT JOIN TRAINING_DATASET T1 ON T.'TRAING_DATA_SET_ID'=T1.'training_dataset_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TrainingRelation loadCurrentDeep(Cursor cursor, boolean lock) {
        TrainingRelation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Gesture gesture = loadCurrentOther(daoSession.getGestureDao(), cursor, offset);
         if(gesture != null) {
            entity.setGesture(gesture);
        }
        offset += daoSession.getGestureDao().getAllColumns().length;

        TrainingDataset trainingDataset = loadCurrentOther(daoSession.getTrainingDatasetDao(), cursor, offset);
         if(trainingDataset != null) {
            entity.setTrainingDataset(trainingDataset);
        }

        return entity;    
    }

    public TrainingRelation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TrainingRelation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TrainingRelation> list = new ArrayList<TrainingRelation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TrainingRelation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TrainingRelation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
