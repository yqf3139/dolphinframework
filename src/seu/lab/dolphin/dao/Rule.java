package seu.lab.dolphin.dao;

import seu.lab.dolphin.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table RULE.
 */
public class Rule {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String discription;
    private boolean applied;
    private int event_type;
    private Long event_id;
    private long plugin_id;
    private long gesture_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RuleDao myDao;

    private Plugin plugin;
    private Long plugin__resolvedKey;

    private Gesture gesture;
    private Long gesture__resolvedKey;


    public Rule() {
    }

    public Rule(Long id) {
        this.id = id;
    }

    public Rule(Long id, String name, String discription, boolean applied, int event_type, Long event_id, long plugin_id, long gesture_id) {
        this.id = id;
        this.name = name;
        this.discription = discription;
        this.applied = applied;
        this.event_type = event_type;
        this.event_id = event_id;
        this.plugin_id = plugin_id;
        this.gesture_id = gesture_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRuleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getDiscription() {
        return discription;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDiscription(String discription) {
        this.discription = discription;
    }

    public boolean getApplied() {
        return applied;
    }

    public void setApplied(boolean applied) {
        this.applied = applied;
    }

    public int getEvent_type() {
        return event_type;
    }

    public void setEvent_type(int event_type) {
        this.event_type = event_type;
    }

    public Long getEvent_id() {
        return event_id;
    }

    public void setEvent_id(Long event_id) {
        this.event_id = event_id;
    }

    public long getPlugin_id() {
        return plugin_id;
    }

    public void setPlugin_id(long plugin_id) {
        this.plugin_id = plugin_id;
    }

    public long getGesture_id() {
        return gesture_id;
    }

    public void setGesture_id(long gesture_id) {
        this.gesture_id = gesture_id;
    }

    /** To-one relationship, resolved on first access. */
    public Plugin getPlugin() {
        long __key = this.plugin_id;
        if (plugin__resolvedKey == null || !plugin__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PluginDao targetDao = daoSession.getPluginDao();
            Plugin pluginNew = targetDao.load(__key);
            synchronized (this) {
                plugin = pluginNew;
            	plugin__resolvedKey = __key;
            }
        }
        return plugin;
    }

    public void setPlugin(Plugin plugin) {
        if (plugin == null) {
            throw new DaoException("To-one property 'plugin_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.plugin = plugin;
            plugin_id = plugin.getId();
            plugin__resolvedKey = plugin_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Gesture getGesture() {
        long __key = this.gesture_id;
        if (gesture__resolvedKey == null || !gesture__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GestureDao targetDao = daoSession.getGestureDao();
            Gesture gestureNew = targetDao.load(__key);
            synchronized (this) {
                gesture = gestureNew;
            	gesture__resolvedKey = __key;
            }
        }
        return gesture;
    }

    public void setGesture(Gesture gesture) {
        if (gesture == null) {
            throw new DaoException("To-one property 'gesture_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.gesture = gesture;
            gesture_id = gesture.getId();
            gesture__resolvedKey = gesture_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
