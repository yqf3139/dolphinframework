package seu.lab.dolphin.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import seu.lab.dolphin.dao.ModelConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MODEL_CONFIG.
*/
public class ModelConfigDao extends AbstractDao<ModelConfig, Long> {

    public static final String TABLENAME = "MODEL_CONFIG";

    /**
     * Properties of entity ModelConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "model_config");
        public final static Property Masks = new Property(1, String.class, "masks", false, "MASKS");
        public final static Property Model_ids = new Property(2, String.class, "model_ids", false, "MODEL_IDS");
    };


    public ModelConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ModelConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MODEL_CONFIG' (" + //
                "'model_config' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'MASKS' TEXT NOT NULL ," + // 1: masks
                "'MODEL_IDS' TEXT NOT NULL );"); // 2: model_ids
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MODEL_CONFIG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ModelConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMasks());
        stmt.bindString(3, entity.getModel_ids());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ModelConfig readEntity(Cursor cursor, int offset) {
        ModelConfig entity = new ModelConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // masks
            cursor.getString(offset + 2) // model_ids
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ModelConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMasks(cursor.getString(offset + 1));
        entity.setModel_ids(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ModelConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ModelConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
