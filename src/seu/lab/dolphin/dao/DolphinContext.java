package seu.lab.dolphin.dao;

import seu.lab.dolphin.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DOLPHIN_CONTEXT.
 */
public class DolphinContext {

    private Long id;
    /** Not-null value. */
    private String activity_name;
    /** Not-null value. */
    private String device_state;
    private Long model_config_id;
    private long plugin_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DolphinContextDao myDao;

    private ModelConfig modelConfig;
    private Long modelConfig__resolvedKey;

    private Plugin plugin;
    private Long plugin__resolvedKey;


    public DolphinContext() {
    }

    public DolphinContext(Long id) {
        this.id = id;
    }

    public DolphinContext(Long id, String activity_name, String device_state, Long model_config_id, long plugin_id) {
        this.id = id;
        this.activity_name = activity_name;
        this.device_state = device_state;
        this.model_config_id = model_config_id;
        this.plugin_id = plugin_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDolphinContextDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getActivity_name() {
        return activity_name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setActivity_name(String activity_name) {
        this.activity_name = activity_name;
    }

    /** Not-null value. */
    public String getDevice_state() {
        return device_state;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDevice_state(String device_state) {
        this.device_state = device_state;
    }

    public Long getModel_config_id() {
        return model_config_id;
    }

    public void setModel_config_id(Long model_config_id) {
        this.model_config_id = model_config_id;
    }

    public long getPlugin_id() {
        return plugin_id;
    }

    public void setPlugin_id(long plugin_id) {
        this.plugin_id = plugin_id;
    }

    /** To-one relationship, resolved on first access. */
    public ModelConfig getModelConfig() {
        Long __key = this.model_config_id;
        if (modelConfig__resolvedKey == null || !modelConfig__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ModelConfigDao targetDao = daoSession.getModelConfigDao();
            ModelConfig modelConfigNew = targetDao.load(__key);
            synchronized (this) {
                modelConfig = modelConfigNew;
            	modelConfig__resolvedKey = __key;
            }
        }
        return modelConfig;
    }

    public void setModelConfig(ModelConfig modelConfig) {
        synchronized (this) {
            this.modelConfig = modelConfig;
            model_config_id = modelConfig == null ? null : modelConfig.getId();
            modelConfig__resolvedKey = model_config_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Plugin getPlugin() {
        long __key = this.plugin_id;
        if (plugin__resolvedKey == null || !plugin__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PluginDao targetDao = daoSession.getPluginDao();
            Plugin pluginNew = targetDao.load(__key);
            synchronized (this) {
                plugin = pluginNew;
            	plugin__resolvedKey = __key;
            }
        }
        return plugin;
    }

    public void setPlugin(Plugin plugin) {
        if (plugin == null) {
            throw new DaoException("To-one property 'plugin_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.plugin = plugin;
            plugin_id = plugin.getId();
            plugin__resolvedKey = plugin_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
