package seu.lab.dolphin.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import seu.lab.dolphin.dao.DolphinContextDao;
import seu.lab.dolphin.dao.RuleDao;
import seu.lab.dolphin.dao.PluginDao;
import seu.lab.dolphin.dao.GestureDao;
import seu.lab.dolphin.dao.KeyEventDao;
import seu.lab.dolphin.dao.SwipeEventDao;
import seu.lab.dolphin.dao.PlaybackEventDao;
import seu.lab.dolphin.dao.RawGestureDataDao;
import seu.lab.dolphin.dao.TrainingDatasetDao;
import seu.lab.dolphin.dao.ModelConfigDao;
import seu.lab.dolphin.dao.ModelDao;
import seu.lab.dolphin.dao.TrainingRelationDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 3): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        DolphinContextDao.createTable(db, ifNotExists);
        RuleDao.createTable(db, ifNotExists);
        PluginDao.createTable(db, ifNotExists);
        GestureDao.createTable(db, ifNotExists);
        KeyEventDao.createTable(db, ifNotExists);
        SwipeEventDao.createTable(db, ifNotExists);
        PlaybackEventDao.createTable(db, ifNotExists);
        RawGestureDataDao.createTable(db, ifNotExists);
        TrainingDatasetDao.createTable(db, ifNotExists);
        ModelConfigDao.createTable(db, ifNotExists);
        ModelDao.createTable(db, ifNotExists);
        TrainingRelationDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        DolphinContextDao.dropTable(db, ifExists);
        RuleDao.dropTable(db, ifExists);
        PluginDao.dropTable(db, ifExists);
        GestureDao.dropTable(db, ifExists);
        KeyEventDao.dropTable(db, ifExists);
        SwipeEventDao.dropTable(db, ifExists);
        PlaybackEventDao.dropTable(db, ifExists);
        RawGestureDataDao.dropTable(db, ifExists);
        TrainingDatasetDao.dropTable(db, ifExists);
        ModelConfigDao.dropTable(db, ifExists);
        ModelDao.dropTable(db, ifExists);
        TrainingRelationDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(DolphinContextDao.class);
        registerDaoClass(RuleDao.class);
        registerDaoClass(PluginDao.class);
        registerDaoClass(GestureDao.class);
        registerDaoClass(KeyEventDao.class);
        registerDaoClass(SwipeEventDao.class);
        registerDaoClass(PlaybackEventDao.class);
        registerDaoClass(RawGestureDataDao.class);
        registerDaoClass(TrainingDatasetDao.class);
        registerDaoClass(ModelConfigDao.class);
        registerDaoClass(ModelDao.class);
        registerDaoClass(TrainingRelationDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
