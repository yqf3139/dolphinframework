package seu.lab.dolphin.dao;

import java.util.List;
import seu.lab.dolphin.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TRAINING_DATASET.
 */
public class TrainingDataset {

    private Long id;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String description;
    private long model_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TrainingDatasetDao myDao;

    private Model model;
    private Long model__resolvedKey;

    private List<TrainingRelation> training_relation;

    public TrainingDataset() {
    }

    public TrainingDataset(Long id) {
        this.id = id;
    }

    public TrainingDataset(Long id, String name, String description, long model_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.model_id = model_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTrainingDatasetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getDescription() {
        return description;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDescription(String description) {
        this.description = description;
    }

    public long getModel_id() {
        return model_id;
    }

    public void setModel_id(long model_id) {
        this.model_id = model_id;
    }

    /** To-one relationship, resolved on first access. */
    public Model getModel() {
        long __key = this.model_id;
        if (model__resolvedKey == null || !model__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ModelDao targetDao = daoSession.getModelDao();
            Model modelNew = targetDao.load(__key);
            synchronized (this) {
                model = modelNew;
            	model__resolvedKey = __key;
            }
        }
        return model;
    }

    public void setModel(Model model) {
        if (model == null) {
            throw new DaoException("To-one property 'model_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.model = model;
            model_id = model.getId();
            model__resolvedKey = model_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrainingRelation> getTraining_relation() {
        if (training_relation == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainingRelationDao targetDao = daoSession.getTrainingRelationDao();
            List<TrainingRelation> training_relationNew = targetDao._queryTrainingDataset_Training_relation(id);
            synchronized (this) {
                if(training_relation == null) {
                    training_relation = training_relationNew;
                }
            }
        }
        return training_relation;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTraining_relation() {
        training_relation = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
