package seu.lab.dolphin.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import seu.lab.dolphin.dao.Rule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RULE.
*/
public class RuleDao extends AbstractDao<Rule, Long> {

    public static final String TABLENAME = "RULE";

    /**
     * Properties of entity Rule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "rule_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Discription = new Property(2, String.class, "discription", false, "DISCRIPTION");
        public final static Property Applied = new Property(3, boolean.class, "applied", false, "APPLIED");
        public final static Property Event_type = new Property(4, int.class, "event_type", false, "EVENT_TYPE");
        public final static Property Event_id = new Property(5, Long.class, "event_id", false, "EVENT_ID");
        public final static Property Plugin_id = new Property(6, long.class, "plugin_id", false, "PLUGIN_ID");
        public final static Property Gesture_id = new Property(7, long.class, "gesture_id", false, "GESTURE_ID");
    };

    private DaoSession daoSession;

    private Query<Rule> plugin_RulesQuery;
    private Query<Rule> gesture_RulesQuery;

    public RuleDao(DaoConfig config) {
        super(config);
    }
    
    public RuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RULE' (" + //
                "'rule_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'DISCRIPTION' TEXT NOT NULL ," + // 2: discription
                "'APPLIED' INTEGER NOT NULL ," + // 3: applied
                "'EVENT_TYPE' INTEGER NOT NULL ," + // 4: event_type
                "'EVENT_ID' INTEGER," + // 5: event_id
                "'PLUGIN_ID' INTEGER NOT NULL ," + // 6: plugin_id
                "'GESTURE_ID' INTEGER NOT NULL );"); // 7: gesture_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RULE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getDiscription());
        stmt.bindLong(4, entity.getApplied() ? 1l: 0l);
        stmt.bindLong(5, entity.getEvent_type());
 
        Long event_id = entity.getEvent_id();
        if (event_id != null) {
            stmt.bindLong(6, event_id);
        }
        stmt.bindLong(7, entity.getPlugin_id());
        stmt.bindLong(8, entity.getGesture_id());
    }

    @Override
    protected void attachEntity(Rule entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rule readEntity(Cursor cursor, int offset) {
        Rule entity = new Rule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // discription
            cursor.getShort(offset + 3) != 0, // applied
            cursor.getInt(offset + 4), // event_type
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // event_id
            cursor.getLong(offset + 6), // plugin_id
            cursor.getLong(offset + 7) // gesture_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setDiscription(cursor.getString(offset + 2));
        entity.setApplied(cursor.getShort(offset + 3) != 0);
        entity.setEvent_type(cursor.getInt(offset + 4));
        entity.setEvent_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setPlugin_id(cursor.getLong(offset + 6));
        entity.setGesture_id(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "rules" to-many relationship of Plugin. */
    public List<Rule> _queryPlugin_Rules(long plugin_id) {
        synchronized (this) {
            if (plugin_RulesQuery == null) {
                QueryBuilder<Rule> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Plugin_id.eq(null));
                plugin_RulesQuery = queryBuilder.build();
            }
        }
        Query<Rule> query = plugin_RulesQuery.forCurrentThread();
        query.setParameter(0, plugin_id);
        return query.list();
    }

    /** Internal query to resolve the "rules" to-many relationship of Gesture. */
    public List<Rule> _queryGesture_Rules(long plugin_id) {
        synchronized (this) {
            if (gesture_RulesQuery == null) {
                QueryBuilder<Rule> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Plugin_id.eq(null));
                gesture_RulesQuery = queryBuilder.build();
            }
        }
        Query<Rule> query = gesture_RulesQuery.forCurrentThread();
        query.setParameter(0, plugin_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPluginDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGestureDao().getAllColumns());
            builder.append(" FROM RULE T");
            builder.append(" LEFT JOIN PLUGIN T0 ON T.'PLUGIN_ID'=T0.'plugin_id'");
            builder.append(" LEFT JOIN GESTURE T1 ON T.'GESTURE_ID'=T1.'gesture_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Rule loadCurrentDeep(Cursor cursor, boolean lock) {
        Rule entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Plugin plugin = loadCurrentOther(daoSession.getPluginDao(), cursor, offset);
         if(plugin != null) {
            entity.setPlugin(plugin);
        }
        offset += daoSession.getPluginDao().getAllColumns().length;

        Gesture gesture = loadCurrentOther(daoSession.getGestureDao(), cursor, offset);
         if(gesture != null) {
            entity.setGesture(gesture);
        }

        return entity;    
    }

    public Rule loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Rule> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Rule> list = new ArrayList<Rule>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Rule> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Rule> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
