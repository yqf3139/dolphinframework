package seu.lab.dolphin.dao;

import java.util.List;
import seu.lab.dolphin.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GESTURE.
 */
public class Gesture {

    private Long id;
    private int gesture_num;
    /** Not-null value. */
    private String name;
    private Integer type;
    /** Not-null value. */
    private String discription;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GestureDao myDao;

    private List<Rule> rules;
    private List<Rule> raw_gesuture_data;
    private List<TrainingRelation> training_relation;

    public Gesture() {
    }

    public Gesture(Long id) {
        this.id = id;
    }

    public Gesture(Long id, int gesture_num, String name, Integer type, String discription) {
        this.id = id;
        this.gesture_num = gesture_num;
        this.name = name;
        this.type = type;
        this.discription = discription;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGestureDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getGesture_num() {
        return gesture_num;
    }

    public void setGesture_num(int gesture_num) {
        this.gesture_num = gesture_num;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    /** Not-null value. */
    public String getDiscription() {
        return discription;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDiscription(String discription) {
        this.discription = discription;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Rule> getRules() {
        if (rules == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleDao targetDao = daoSession.getRuleDao();
            List<Rule> rulesNew = targetDao._queryGesture_Rules(id);
            synchronized (this) {
                if(rules == null) {
                    rules = rulesNew;
                }
            }
        }
        return rules;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRules() {
        rules = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Rule> getRaw_gesuture_data() {
        if (raw_gesuture_data == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RuleDao targetDao = daoSession.getRuleDao();
            List<Rule> raw_gesuture_dataNew = targetDao._queryGesture_Raw_gesuture_data(id);
            synchronized (this) {
                if(raw_gesuture_data == null) {
                    raw_gesuture_data = raw_gesuture_dataNew;
                }
            }
        }
        return raw_gesuture_data;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRaw_gesuture_data() {
        raw_gesuture_data = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrainingRelation> getTraining_relation() {
        if (training_relation == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrainingRelationDao targetDao = daoSession.getTrainingRelationDao();
            List<TrainingRelation> training_relationNew = targetDao._queryGesture_Training_relation(id);
            synchronized (this) {
                if(training_relation == null) {
                    training_relation = training_relationNew;
                }
            }
        }
        return training_relation;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTraining_relation() {
        training_relation = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
